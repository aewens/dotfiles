#!/usr/bin/env python3

import sys
from pathlib import Path

ABOTS_ROOT = Path("~/code/abots").expanduser()
sys.path.insert(0, str(ABOTS_ROOT))

from abots import (
    quit,
    capitalize,
    load_env,
    push_notification
)

from sys import stdin, exit
from time import sleep
from os import getenv
from subprocess import Popen, PIPE
from shlex import split
from datetime import datetime
from argparse import ArgumentParser

MINUTE = 60
PROG = "pmdr"

def arguments():
    parser = ArgumentParser(PROG)
    parser.add_argument(
        "-c", "--cycle",
        dest="cycle",
        metavar="CYCLE",
        nargs="?",
        default=0,
        type=int,
        help="What cycle to start with"
    )
    parser.add_argument(
        "-s", "--state",
        dest="state",
        default="work",
        choices=["work", "break"],
        help="What state to start with (default: work)"
    )
    parser.add_argument(
        "-k", "--keep-alive",
        dest="keep_alive",
        action="store_true",
        help="Do not kill process at 6pm"
    )
    return parser.parse_args()

def run(command, data=None):
    proc = Popen(split(command), stdin=PIPE, stdout=PIPE, stderr=PIPE)
    if data is not None:
        if isinstance(data, str):
            data = data.encode()

        proc.stdin.write(data)

    return proc

def notify(message):
    now = datetime.now().strftime("%Y-%m-%d %H:%M")
    print(f"{now} | {message}")

    run(f"notify-send '{message}'")

    key = getenv("PRIVATE_TOKEN")
    err, res = push_notification("Pomodoro Timer", message)
    if err:
        quit(res)

def main():
    err, res = load_env(ABOTS_ROOT)
    if err:
        quit(res)

    args = arguments()

    count = args.cycle
    state = args.state
    zzz = 25

    remap = dict()
    remap["work"] = "break"
    remap["break"] = "work"

    while True:
        if not args.keep_alive and datetime.now().hour >= 12+6:
            notify("Stopping timer")
            exit(0)

        notify(f"{capitalize(state)} - {zzz}m (cycle {count+1})")
        sleep(zzz * MINUTE)

        state = remap[state]
        if state == "work":
            zzz = 25
            count = count + 1

        if state == "break":
            zzz = 5 if (count+1)%4 != 0 else 30

if __name__ == "__main__":
    main()
